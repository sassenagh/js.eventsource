{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-24T18:14:07.652Z",
    "end": "2021-02-24T18:14:07.835Z",
    "duration": 183,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e1d0ebc2-c185-465b-9d54-6fdc917863f9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
          "title": "Eventsource test suit",
          "fullFile": "/Users/eriklandvall/Workspace/js.eventsource/src/test/integration.test.js",
          "file": "/src/test/integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Eventsource test suit \"before all\" hook",
              "timedOut": false,
              "duration": 128,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const\n  CoreFactory = require('superhero/core/factory'),\n  coreFactory = new CoreFactory\ncore = coreFactory.create()\ncore.add('client/redis', '@superhero/core.redis/src/client')\ncore.add('server', __dirname + '/../server')\ncore.add('client', __dirname + '/../client')\ncore.add('mapper', __dirname + '/../mapper')\ncore.add('schema', __dirname + '/../schema')\ncore.add('test', __dirname)\ncore.load(true)\ncore.locate('core/bootstrap').bootstrap().then(done)",
              "err": {},
              "uuid": "667fc195-9a70-45eb-8869-bb6d4dc20462",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Eventsource test suit \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(async() =>\n{\n  await core.locate('api/redis-subscriber').quit(),\n  await core.locate('domain/process').quit(),\n  await core.locate('eventsource/client').quit(),\n  await core.locate('redis/client').quit()\n},2e3)",
              "err": {},
              "uuid": "18ee6a00-ff57-4257-b70a-f901e989a222",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "can write to the eventsource system and observe when a domain event was persisted",
              "fullTitle": "Eventsource test suit can write to the eventsource system and observe when a domain event was persisted",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"context\",\n  \"value\": {\n    \"domain\": \"test-domain\",\n    \"ppid\": \"1evajv313\",\n    \"pid\": \"kljrbcpv\",\n    \"name\": \"test-event\",\n    \"data\": {\n      \"test\": \"kljrbcpv\"\n    },\n    \"dto\": {\n      \"pid\": \"kljrbcpv\"\n    },\n    \"processState\": {\n      \"test\": \"kljrbcpv\"\n    }\n  }\n}",
              "code": "const client = core.locate('eventsource/client')\nclient.on(domain, name, async (dto) =>\n{\n  const processState = await client.readState(domain, pid)\n  context(this, { title:'context', value:{ domain, ppid, pid, name, data, dto, processState }})\n  expect(processState).to.deep.equal(data)\n  done()\n}).then(() => client.write({ domain, ppid, pid, name, data }))",
              "err": {},
              "uuid": "3bec780c-b0fe-49fa-8942-ea94737f1b91",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can read the eventlog",
              "fullTitle": "Eventsource test suit can read the eventlog",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"context\",\n  \"value\": {\n    \"domain\": \"test-domain\",\n    \"pid\": \"kljrbcpv\",\n    \"data\": {\n      \"test\": \"kljrbcpv\"\n    },\n    \"eventlog\": [\n      {\n        \"data\": {\n          \"test\": \"kljrbcpv\"\n        },\n        \"domain\": \"test-domain\",\n        \"pid\": \"kljrbcpv\",\n        \"ppid\": \"1evajv313\",\n        \"name\": \"test-event\"\n      }\n    ]\n  }\n}",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventlog  = await client.readEventlog(domain, pid)\ncontext(this, { title:'context', value:{ domain, pid, data, eventlog }})\nexpect(eventlog).to.deep.equal([{ domain, ppid, pid, name, data }])",
              "err": {},
              "uuid": "ab9deb88-a12e-4e40-aada-55d478b5b74c",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can read a process event",
              "fullTitle": "Eventsource test suit can read a process event",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"context\",\n  \"value\": {\n    \"domain\": \"test-domain\",\n    \"pid\": \"kljrbcpv\",\n    \"name\": \"test-event\",\n    \"data\": {\n      \"test\": \"kljrbcpv\"\n    },\n    \"eventData\": {\n      \"test\": \"kljrbcpv\"\n    }\n  }\n}",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventData = await client.readEvent(domain, pid, name)\ncontext(this, { title:'context', value:{ domain, pid, name, data, eventData }})\nexpect(eventData).to.deep.equal(data)",
              "err": {},
              "uuid": "fc1b8494-eac5-400c-9f09-02eefcf4899f",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can read if a process has a persisted event",
              "fullTitle": "Eventsource test suit can read if a process has a persisted event",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"context\",\n  \"value\": {\n    \"domain\": \"test-domain\",\n    \"pid\": \"kljrbcpv\",\n    \"name\": \"test-event\",\n    \"data\": {\n      \"test\": \"kljrbcpv\"\n    },\n    \"hasEvent\": true\n  }\n}",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  hasEvent  = await client.hasEvent(domain, pid, name)\ncontext(this, { title:'context', value:{ domain, pid, name, data, hasEvent }})\nexpect(hasEvent).to.equal(true)",
              "err": {},
              "uuid": "e739c838-d66d-4cad-b835-4ae491c02399",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can lazyload an existing process event",
              "fullTitle": "Eventsource test suit can lazyload an existing process event",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"context\",\n  \"value\": {\n    \"domain\": \"test-domain\",\n    \"pid\": \"kljrbcpv\",\n    \"name\": \"test-event\",\n    \"data\": {\n      \"test\": \"kljrbcpv\"\n    },\n    \"eventData\": {\n      \"test\": \"kljrbcpv\"\n    }\n  }\n}",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventData = await client.lazyload(domain, pid, name, async () => 123)\ncontext(this, { title:'context', value:{ domain, pid, name, data, eventData }})\nexpect(eventData).to.deep.equal(data)",
              "err": {},
              "uuid": "723045a0-a84a-4069-a179-8225ed40e996",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can lazyload a none existing process event",
              "fullTitle": "Eventsource test suit can lazyload a none existing process event",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"context\",\n  \"value\": {\n    \"domain\": \"test-domain\",\n    \"pid\": \"kljrbcpv\",\n    \"name\": \"test-event\",\n    \"data\": {\n      \"test\": \"kljrbcpv\"\n    },\n    \"eventData\": 123\n  }\n}",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventData = await client.lazyload(domain, pid, 'foobar', async () => 123)\ncontext(this, { title:'context', value:{ domain, pid, name, data, eventData }})\nexpect(eventData).to.equal(123)",
              "err": {},
              "uuid": "924d09b2-51d4-4f22-ab1c-4612b55284b4",
              "parentUUID": "03a6a27d-f383-43f9-8620-c97e159ec6c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bec780c-b0fe-49fa-8942-ea94737f1b91",
            "ab9deb88-a12e-4e40-aada-55d478b5b74c",
            "fc1b8494-eac5-400c-9f09-02eefcf4899f",
            "e739c838-d66d-4cad-b835-4ae491c02399",
            "723045a0-a84a-4069-a179-8225ed40e996",
            "924d09b2-51d4-4f22-ab1c-4612b55284b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 50,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "doc/test-suit",
        "reportFilename": "index",
        "showHooks": "always"
      },
      "version": "4.1.0"
    }
  }
}