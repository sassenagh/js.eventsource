{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-27T05:41:45.123Z",
    "end": "2021-02-27T05:41:45.248Z",
    "duration": 125,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fabcf9c1-d60d-45d5-8dbe-7649b49016a0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
          "title": "Eventsource test suit",
          "fullFile": "/home/superhero/Projects/js.eventsource/src/test/integration.test.js",
          "file": "/src/test/integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Eventsource test suit \"before all\" hook",
              "timedOut": false,
              "duration": 106,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const\n  CoreFactory = require('superhero/core/factory'),\n  coreFactory = new CoreFactory\ncore = coreFactory.create()\ncore.add('client/redis', '@superhero/core.redis/src/client')\ncore.add('server', __dirname + '/../server')\ncore.add('client', __dirname + '/../client')\ncore.add('mapper', __dirname + '/../mapper')\ncore.add('schema', __dirname + '/../schema')\ncore.add('test', __dirname)\ncore.load(true)\ncore.locate('core/bootstrap').bootstrap().then(done)",
              "err": {},
              "uuid": "dc00d786-1e58-4ca1-9050-4f778a7c5ac1",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Eventsource test suit \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "context(this, { title:'process event', value:event })",
              "err": {},
              "uuid": "83f18a0a-5112-4547-b980-71b0e9d3b458",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Eventsource test suit \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(async() =>\n{\n  await core.locate('api/redis-subscriber').quit(),\n  await core.locate('domain/process').quit(),\n  await core.locate('eventsource/client').quit(),\n  await core.locate('redis/client').connection.quit()\n},2e3)",
              "err": {},
              "uuid": "224e31a6-1784-49b9-ae56-552a263cd510",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "observe when a domain event was persisted",
              "fullTitle": "Eventsource test suit observe when a domain event was persisted",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"dto\",\n    \"value\": {\n      \"pid\": \"klnarciq\"\n    }\n  }\n]",
              "code": "const client  = core.locate('eventsource/client')\nclient.on(domain, name, async (dto) =>\n{\n  context(this, { title:'dto', value:dto })\n  expect(dto.pid).to.equal(pid)\n  done()\n}).then(() => client.write(event))",
              "err": {},
              "uuid": "5f930f35-dfe0-4e81-89f5-83963acd534f",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "read the process state",
              "fullTitle": "Eventsource test suit read the process state",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"process state\",\n    \"value\": {\n      \"test\": \"klnarciq\"\n    }\n  }\n]",
              "code": "const \n  client        = core.locate('eventsource/client'),\n  processState  = await client.readState(domain, pid)\ncontext(this, { title:'process state', value:processState })\nexpect(processState).to.deep.equal(data)",
              "err": {},
              "uuid": "0a5aa004-f98b-4971-ae47-e1ad16b3e350",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "read the eventlog",
              "fullTitle": "Eventsource test suit read the eventlog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"eventlog\",\n    \"value\": [\n      {\n        \"data\": {\n          \"test\": \"klnarciq\"\n        },\n        \"domain\": \"test-domain\",\n        \"pid\": \"klnarciq\",\n        \"ppid\": \"1evh03jh2\",\n        \"name\": \"test-event\"\n      }\n    ]\n  }\n]",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventlog  = await client.readEventlog(domain, pid)\ncontext(this, { title:'eventlog', value:eventlog  })\nexpect(eventlog).to.deep.equal([ event ])",
              "err": {},
              "uuid": "4e2c4cc8-efd7-434c-ab15-6b039ce8a04b",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "read an process event",
              "fullTitle": "Eventsource test suit read an process event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"event data\",\n    \"value\": {\n      \"test\": \"klnarciq\"\n    }\n  }\n]",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventData = await client.readEvent(domain, pid, name)\ncontext(this, { title:'event data',  value:eventData })\nexpect(eventData).to.deep.equal(data)",
              "err": {},
              "uuid": "eff12a77-604c-4a7d-8896-ba8aa16cdc03",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "read if a process has a persisted event",
              "fullTitle": "Eventsource test suit read if a process has a persisted event",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"has event\",\n    \"value\": true\n  }\n]",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  hasEvent  = await client.hasEvent(domain, pid, name)\ncontext(this, { title:'has event', value:hasEvent  })\nexpect(hasEvent).to.equal(true)",
              "err": {},
              "uuid": "003979ac-d54b-43c2-a6cb-8ea98e86880e",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "lazyload an existing process event",
              "fullTitle": "Eventsource test suit lazyload an existing process event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"event data\",\n    \"value\": {\n      \"test\": \"klnarciq\"\n    }\n  }\n]",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventData = await client.lazyload(domain, pid, name, async () => 123)\ncontext(this, { title:'event data',  value:eventData })\nexpect(eventData).to.deep.equal(data)",
              "err": {},
              "uuid": "09f9233f-5c7f-4481-868c-e24800072d72",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "lazyload a none existing process event",
              "fullTitle": "Eventsource test suit lazyload a none existing process event",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"process event\",\n    \"value\": {\n      \"domain\": \"test-domain\",\n      \"ppid\": \"1evh03jh2\",\n      \"pid\": \"klnarciq\",\n      \"name\": \"test-event\",\n      \"data\": {\n        \"test\": \"klnarciq\"\n      }\n    }\n  },\n  {\n    \"title\": \"event data\",\n    \"value\": 123\n  }\n]",
              "code": "const\n  client    = core.locate('eventsource/client'),\n  eventData = await client.lazyload(domain, pid, 'foobar', async () => 123)\ncontext(this, { title:'event data',  value:eventData })\nexpect(eventData).to.equal(123)",
              "err": {},
              "uuid": "46b2f6dd-6590-42ca-a71b-2a9be3b9996d",
              "parentUUID": "fffd5220-0b9f-436e-9dfe-4e9605f3a0c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f930f35-dfe0-4e81-89f5-83963acd534f",
            "0a5aa004-f98b-4971-ae47-e1ad16b3e350",
            "4e2c4cc8-efd7-434c-ab15-6b039ce8a04b",
            "eff12a77-604c-4a7d-8896-ba8aa16cdc03",
            "003979ac-d54b-43c2-a6cb-8ea98e86880e",
            "09f9233f-5c7f-4481-868c-e24800072d72",
            "46b2f6dd-6590-42ca-a71b-2a9be3b9996d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "doc/test-suit",
        "reportFilename": "index",
        "showHooks": "always"
      },
      "version": "4.1.0"
    }
  }
}